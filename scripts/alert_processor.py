# alert_processor.py - Analiza tr√°fico SS7 y SIP con notificaciones Kafka
import requests
import pandas as pd
import time
import os
from typing import Dict, Any, List
from datetime import datetime
from kafka import KafkaProducer
import json

API_URL = "http://localhost:8000"
INTERVALO_ANALISIS = 10  # segundos entre ciclos completos de an√°lisis
RUTA_SIP_CSV = "/home/evelym/Lab/VelyFirewall/infra/data/salida_sip.csv"
KAFKA_BROKER = "localhost:9092"
TOPIC_NOTICES = "notices"

producer = KafkaProducer(
    bootstrap_servers=KAFKA_BROKER,
    value_serializer=lambda v: json.dumps(v).encode('utf-8')
)

def enviar_aviso(ip: str):
    mensaje = {
        "timestamp": datetime.now().isoformat(),
        "tipo_alerta": "ALERTA_MODERADA",
        "ip_origen": ip,
        "mensaje": f"Se detect√≥ una alerta moderada desde la IP {ip}. El operador debe tomar medidas."
    }
    producer.send(TOPIC_NOTICES, value=mensaje)
    print(f"üì® Mensaje enviado al topic '{TOPIC_NOTICES}' sobre IP {ip}")

def bloquear_ip(ip: str):
    try:
        print(f"\nüõ°Ô∏è Verificando estado de IP {ip}...")
        response = requests.post(f"{API_URL}/block", json={"ip": ip})
        if response.status_code == 200:
            data = response.json()
            if data.get("status") == "info":
                print(f"‚ÑπÔ∏è {data.get('message')}")
            else:
                print(f"‚úÖ {data.get('message')}")
        else:
            print(f"‚ö†Ô∏è Error en el bloqueo. C√≥digo: {response.status_code}")
            print(f"üìÑ Respuesta: {response.text}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {str(e)}")
    except Exception as e:
        print(f"‚ùå Error al bloquear IP: {str(e)}")

def analizar_ss7_diameter():
    try:
        print("\n" + "="*50)
        print("üî• Firewall Inteligente - An√°lisis SS7 üî•")
        print("="*50)
        print(f"‚è±Ô∏è Fecha y hora del sistema: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("\nüîç Solicitando predicciones de riesgo a la API...")

        response = requests.get(f"{API_URL}/predict")
        response.raise_for_status()
        data = response.json()

        if "message" in data:
            print(f"\n‚ÑπÔ∏è {data['message']}")
            return

        if "resultados" not in data:
            print("‚ùå Respuesta inesperada de la API")
            return

        resultados: List[Dict[str, Any]] = data["resultados"]
        if not resultados:
            print("‚ö†Ô∏è En este momento no hay tr√°fico SS7 por analizar")
            return

        fuente_log = resultados[0].get("fuente_log", "desconocido")
        print(f"\nüìä Archivo analizado: {fuente_log}")
        print(f"üìù Total de registros procesados: {len(resultados)}")
        print("="*50)

        for idx, resultado in enumerate(resultados, 1):
            riesgo = resultado.get("riesgo", 0)
            ip_detectada = resultado.get("ip_origen", "N/A")
            accion = resultado.get("accion", "monitorear")

            print(f"\nüîé An√°lisis #{idx}")
            print(f"üì° IP de origen: {ip_detectada}")
            print(f"üìà Nivel de riesgo: {riesgo:.2f}%")

            if accion == "bloquear":
                print("\nüö®üö® ALERTA CR√çTICA üö®üö® (Riesgo > 90%)")
                print("üõ°Ô∏è Activando protocolo de bloqueo...")
                bloquear_ip(ip_detectada)
            elif accion == "notificar":
                print("\n‚ö†Ô∏è ALERTA MODERADA (50% ‚â§ Riesgo ‚â§ 90%)")
                print("üì¢ Generando notificaci√≥n de seguridad...")
                enviar_aviso(ip_detectada)
            else:
                print("\n‚úÖ RIESGO ACEPTABLE (Riesgo < 50%)")
                print(f"üìù Registrando tr√°fico normal de {ip_detectada}")

            print("-"*50)
            time.sleep(0.5)

    except requests.exceptions.RequestException as e:
        print(f"\n‚ùå Error de conexi√≥n con la API: {str(e)}")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {str(e)}")

def analizar_sip():
    print("\n" + "="*50)
    print("üî• Firewall Inteligente - An√°lisis SIP üî•")
    print("="*50)
    print(f"‚è±Ô∏è Fecha y hora del sistema: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"\nüìÑ Analizando archivo SIP: {RUTA_SIP_CSV}")

    try:
        if not os.path.exists(RUTA_SIP_CSV):
            print(f"‚ùå Archivo no encontrado: {RUTA_SIP_CSV}")
            return

        if os.path.getsize(RUTA_SIP_CSV) == 0:
            print("En este momento no hay tr√°fico SIP por analizar")
            return

        df = pd.read_csv(RUTA_SIP_CSV)

        if "label" not in df.columns or "src_ip" not in df.columns:
            print("‚ùå Error: El CSV debe contener columnas 'label' y 'src_ip'")
            return

        anomalias = df[df["label"] == 1]

        if anomalias.empty:
            print("‚úÖ No se encontr√≥ ninguna anomal√≠a, todo el tr√°fico SIP es normal")
        else:
            print(f"\nüö® Detectadas {len(anomalias)} anomal√≠as:")
            for idx, (_, fila) in enumerate(anomalias.iterrows(), 1):
                ip = fila["src_ip"]
                print(f"\nüîé Anomal√≠a #{idx}")
                print(f"‚Ä¢ IP sospechosa: {ip}")
                bloquear_ip(ip)
                print("-"*40)
                time.sleep(1)

    except pd.errors.EmptyDataError:
        print("‚ö†Ô∏è El archivo no tiene datos v√°lidos. Omitiendo an√°lisis SIP.")
    except Exception as e:
        print(f"‚ùå Error al analizar SIP: {str(e)}")

def ciclo_completo_analisis():
    inicio_ciclo = time.time()
    analizar_ss7_diameter()
    analizar_sip()
    return time.time() - inicio_ciclo

if __name__ == "__main__":
    print("Iniciando an√°lisis continuo de tr√°fico SS7 y SIP...")
    print(f"üîÅ Ciclo completo de an√°lisis cada {INTERVALO_ANALISIS} segundos")
    print("Presione Ctrl+C para detener\n")

    try:
        while True:
            tiempo_analisis = ciclo_completo_analisis()
            tiempo_espera = max(0, INTERVALO_ANALISIS - tiempo_analisis)
            if tiempo_espera > 0:
                print(f"\n‚è±Ô∏è Pr√≥ximo ciclo de an√°lisis en {tiempo_espera:.1f} segundos...")
                time.sleep(tiempo_espera)
            else:
                print("\n‚è±Ô∏è Tiempo de an√°lisis excedido. Iniciando nuevo ciclo inmediatamente...")
    except KeyboardInterrupt:
        print("\n\nüõë An√°lisis interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error fatal: {str(e)}")
