# alert_processor.py - Versi√≥n mejorada para analizar todas las filas del CSV
import requests
import pandas as pd
import json
from typing import Dict, Any, List
import time

API_URL = "http://localhost:8000"

def analizar_ss7():
    """Analiza todas las filas del √∫ltimo archivo CSV de tr√°fico SS7"""
    print("\nüîç Evaluando riesgo de tr√°fico SS7...")
    try:
        # Obtener predicciones para todas las filas
        response = requests.get(f"{API_URL}/predict")
        response.raise_for_status()
        data = response.json()
        
        if "resultados" not in data:
            print("‚ùå Respuesta inesperada de la API")
            return
            
        resultados: List[Dict[str, Any]] = data["resultados"]
        if not resultados:
            print("‚ö†Ô∏è No se encontraron resultados para analizar")
            return
            
        # Mostrar informaci√≥n general del archivo
        fuente_log = resultados[0].get("fuente_log", "desconocido")
        print(f"\nüìä Archivo analizado: {fuente_log}")
        print(f"üìù Total de registros procesados: {len(resultados)}")
        print("="*50)
        
        # Procesar cada resultado individualmente
        for idx, resultado in enumerate(resultados, 1):
            riesgo = resultado.get("riesgo", 0)
            ip_detectada = resultado.get("ip_origen", "N/A")
            accion = resultado.get("accion", "monitorear")
            
            print(f"\nüîé An√°lisis #{idx}")
            print(f"üì° IP de origen: {ip_detectada}")
            print(f"üìà Nivel de riesgo: {riesgo:.2f}%")
            
            # Tomar acci√≥n seg√∫n el nivel de riesgo
            if accion == "bloquear":
                print("\nüö®üö® ALERTA CR√çTICA üö®üö® (Riesgo > 90%)")
                print("üõ°Ô∏è Activando protocolo de bloqueo...")
                bloquear_ip(ip_detectada)
            elif accion == "notificar":
                print("\n‚ö†Ô∏è ALERTA MODERADA (50% ‚â§ Riesgo ‚â§ 90%)")
                print("üì¢ Generando notificaci√≥n de seguridad...")
                # Aqu√≠ ir√≠a el c√≥digo para enviar notificaciones
                print(f"üì® Notificaci√≥n enviada sobre IP {ip_detectada}")
            else:
                print("\n‚úÖ RIESGO ACEPTABLE (Riesgo < 50%)")
                print(f"üìù Registrando tr√°fico normal de {ip_detectada}")
            
            print("-"*50)
            time.sleep(1)  # Peque√±a pausa entre an√°lisis

    except requests.exceptions.RequestException as e:
        print(f"\n‚ùå Error de conexi√≥n con la API: {str(e)}")
    except json.JSONDecodeError:
        print("\n‚ùå Error al decodificar la respuesta de la API")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {str(e)}")

def bloquear_ip(ip: str):
    """Bloquea una IP verificando primero si ya est√° bloqueada"""
    try:
        print(f"\nüõ°Ô∏è Verificando estado de IP {ip}...")
        response = requests.post(f"{API_URL}/block", json={"ip": ip})
        
        if response.status_code == 200:
            data = response.json()
            if data.get("status") == "info":
                print(f"‚ÑπÔ∏è {data.get('message')}")
            else:
                print(f"‚úÖ {data.get('message')}")
        else:
            print(f"‚ö†Ô∏è Error en el bloqueo. C√≥digo: {response.status_code}")
            print(f"üìÑ Respuesta: {response.text}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Error de conexi√≥n: {str(e)}")
    except Exception as e:
        print(f"‚ùå Error al bloquear IP: {str(e)}")

def analizar_sip():
    """Analiza tr√°fico SIP desde archivo CSV"""
    ruta_csv = "/home/evelym/Lab/VelyFirewall/infra/data/salida_sip.csv"
    print(f"\nüìÑ Analizando archivo SIP: {ruta_csv}")
    
    try:
        df = pd.read_csv(ruta_csv)
        
        if "label" not in df.columns or "src_ip" not in df.columns:
            print("‚ùå Error: El CSV debe contener columnas 'label' y 'src_ip'")
            return

        anomalias = df[df["label"] == 1]
        
        if anomalias.empty:
            print("‚úÖ Todo el tr√°fico SIP es normal")
        else:
            print(f"\nüö® Detectadas {len(anomalias)} anomal√≠as:")
            for idx, (_, fila) in enumerate(anomalias.iterrows(), 1):
                ip = fila["src_ip"]
                print(f"\nüîé Anomal√≠a #{idx}")
                print(f"‚Ä¢ IP sospechosa: {ip}")
                bloquear_ip(ip)
                print("-"*40)
                time.sleep(1)
                
    except FileNotFoundError:
        print(f"‚ùå Archivo no encontrado: {ruta_csv}")
    except pd.errors.EmptyDataError:
        print("‚ùå El archivo CSV est√° vac√≠o")
    except Exception as e:
        print(f"‚ùå Error al analizar SIP: {str(e)}")

def menu():
    """Muestra el men√∫ principal de interacci√≥n"""
    while True:
        print("\n" + "="*50)
        print("üî• Firewall Inteligente - Monitor de Tr√°fico üî•")
        print("="*50)
        print("1) Analizar tr√°fico SS7 o Diameter")
        print("2) Analizar tr√°fico SIP")
        print("3) Salir")
        
        opcion = input("\nSeleccione una opci√≥n (1-3): ").strip()
        
        if opcion == "1":
            analizar_ss7()
        elif opcion == "2":
            analizar_sip()
        elif opcion == "3":
            print("\nüëã Sesi√≥n finalizada\n")
            break
        else:
            print("\n‚ùå Opci√≥n inv√°lida. Intente nuevamente.")

if __name__ == "__main__":
    try:
        menu()
    except KeyboardInterrupt:
        print("\n\nüõë Aplicaci√≥n interrumpida por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error fatal: {str(e)}")
