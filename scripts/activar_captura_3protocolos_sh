#!/bin/bash

# --- Configuración ---
INFRA_DIR="/home/evelym/Lab/VelyFirewall/infra"
LOGS_DIR="/home/evelym/Lab/VelyFirewall/logs"
SCRIPTS_DIR="/home/evelym/Lab/VelyFirewall/scripts"
KAFKA_CONTAINER="infra-kafka-1"
KAFKA_TOPIC="raw_logs"
INTERFAZ="eno2"

PROCESAR_SIP_SCRIPT="$INFRA_DIR/procesar_logs_suricata.py"
PCAP_TO_CSV_SCRIPT="pcap_to_csv.py"
CAPTURAR_TRAFICO_SCRIPT="$SCRIPTS_DIR/capturar_trafico.sh"
ALERT_PROCESSOR_SCRIPT="$SCRIPTS_DIR/alert_processor.py"

# Archivo de log para depuración
LOG_FILE="/tmp/firewall_debug.log"
echo "==== Inicio de ejecución - PID: $$ ====" > "$LOG_FILE"

# --- Función de limpieza mejorada ---
limpiar_procesos() {
    echo "" | tee -a "$LOG_FILE"
    echo "🛑 Capturada señal SIGINT - Deteniendo todos los procesos..." | tee -a "$LOG_FILE"
    
    # 1. Detener procesos hijos directos
    echo "Deteniendo procesos hijos del PID $$..." >> "$LOG_FILE"
    pkill -P $$ >> "$LOG_FILE" 2>&1
    
    # 2. Detener procesos específicos por nombre
    echo "Deteniendo procesos por nombre..." >> "$LOG_FILE"
    pkill -f "$CAPTURAR_TRAFICO_SCRIPT" >> "$LOG_FILE" 2>&1
    pkill -f "$PCAP_TO_CSV_SCRIPT" >> "$LOG_FILE" 2>&1
    pkill -f "$PROCESAR_SIP_SCRIPT" >> "$LOG_FILE" 2>&1
    pkill -f "$ALERT_PROCESSOR_SCRIPT" >> "$LOG_FILE" 2>&1
    pkill -f "docker exec.*suricata" >> "$LOG_FILE" 2>&1
    
    # 3. Detener herramientas de captura
    echo "Deteniendo tshark y suricata..." >> "$LOG_FILE"
    pkill -f tshark >> "$LOG_FILE" 2>&1
    pkill -f suricata >> "$LOG_FILE" 2>&1
    
    # 4. Detener contenedores Docker
    echo "Deteniendo contenedores Docker..." >> "$LOG_FILE"
    cd "$INFRA_DIR" && docker compose down >> "$LOG_FILE" 2>&1
    
    # 5. Eliminar archivos CSV analizados
    if [ -f "/tmp/archivos_analizados_api.txt" ]; then
        echo "Eliminando archivos CSV analizados..." | tee -a "$LOG_FILE"
        while read -r archivo; do
            # Eliminar solo si es un archivo CSV y existe
            if [[ "$archivo" == *.csv ]] && [ -f "$LOGS_DIR/$archivo" ]; then
                echo "Eliminando $LOGS_DIR/$archivo" >> "$LOG_FILE"
                rm -f "$LOGS_DIR/$archivo"
            fi
        done < "/tmp/archivos_analizados_api.txt"
        # Eliminar el archivo de lista
        rm -f "/tmp/archivos_analizados_api.txt"
        echo "✅ Archivos analizados eliminados" | tee -a "$LOG_FILE"
    fi
    
    # 6. Verificación final
    echo "🔍 Procesos residuales:" | tee -a "$LOG_FILE"
    ps aux | grep -E 'capturar_trafico|activar_captura|tshark|suricata|python3' | grep -v grep >> "$LOG_FILE"
    
    echo "✅ Todos los procesos detenidos" | tee -a "$LOG_FILE"
    exit 0
}

# Registrar manejador de señales
trap limpiar_procesos SIGINT SIGTERM

# --- Iniciar Docker ---
echo "Iniciando Docker Compose..." | tee -a "$LOG_FILE"
cd "$INFRA_DIR" || exit 1
docker compose up -d >> "$LOG_FILE" 2>&1
echo "Docker Compose iniciado." | tee -a "$LOG_FILE"

# --- Preguntar duración de captura ---
read -p "¿Cuántos segundos deseas para cada ciclo de captura? " DURACION
if ! [[ "$DURACION" =~ ^[0-9]+$ ]]; then
    echo "Duración no válida. Usa solo números."
    limpiar_procesos
fi

echo "Configuración: Duración=$DURACION segundos" >> "$LOG_FILE"

# --- Funciones de captura ---
capturar_ss7() {
    while true; do
        echo "[$(date)] Iniciando captura SS7..." >> "$LOG_FILE"
        "$CAPTURAR_TRAFICO_SCRIPT" "$DURACION" >> "$LOG_FILE" 2>&1
        python3 "$SCRIPTS_DIR/$PCAP_TO_CSV_SCRIPT" >> "$LOG_FILE" 2>&1
        echo "[$(date)] Ciclo SS7 completado" >> "$LOG_FILE"
        sleep 1
    done
}

capturar_sip() {
    while true; do
        echo "[$(date)] Iniciando captura SIP..." >> "$LOG_FILE"
        docker exec infra-suricata-1 timeout "$DURACION" suricata -i "$INTERFAZ" -c /etc/suricata/suricata.yaml -v >> "$LOG_FILE" 2>&1
        sleep "$((DURACION + 5))"
        python3 "$PROCESAR_SIP_SCRIPT" >> "$LOG_FILE" 2>&1
        echo "[$(date)] Ciclo SIP completado" >> "$LOG_FILE"
        sleep 1
    done
}

# --- Iniciar captura de ambos protocolos en segundo plano ---
capturar_ss7 &
SS7_PID=$!
echo "🔧 Proceso SS7 iniciado con PID: $SS7_PID" | tee -a "$LOG_FILE"

capturar_sip &
SIP_PID=$!
echo "🔧 Proceso SIP iniciado con PID: $SIP_PID" | tee -a "$LOG_FILE"

# --- Ejecutar alert_processor en primer plano con espera inicial ---
echo "🔧 Esperando $((DURACION + 5)) segundos antes de iniciar Alert Processor..." | tee -a "$LOG_FILE"
sleep "$((DURACION + 5))"

echo "🔧 Iniciando Alert Processor en primer plano..." | tee -a "$LOG_FILE"
python3 "$ALERT_PROCESSOR_SCRIPT"
